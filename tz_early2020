сходное техническое задание на проектирование айти сервиса для начисления баллов

Основные блоки:
ОК  * веб сервер по приему и отправке веб запросов REST API
*облачная база данных
ОК логика обработки данных


Задача:
ОК принимать сообщения с внешнего сервиса через веб хуки
ОК сохранять в базе данных
ОК обрабатывать
ОК отправлять обратно веб хуки
*админ кабинет с настройками
*менеджерский кабинет с настройками и дашбордами
ОК Объемы
      пиковые входящие: 
ОК          уровень 1: 25 запросов в секунду
*           уровень 2: 50 запросов в секунду
*           уровень 3: 150 запросов в секунду
                  пиковый уровень держится от 1 до 5 часов
                  общий объем запросов на одном мероприятии до 1М
                  в месяц может быть несколько мероприятий: до 10
                  время обработки запроса и отправки веб хука обратно до 1 сек
ОК база данных
    в структуре около 10 таблиц
     важно сохранять все данные, через несколько недель количество записей будет больше 1М плюс журнал. поэтому нужно эти моменты учитывать


Суть работы
Биллинговая система, похожая на систему лояльности

Функции:
ОК регистрация участника
ОК начисление приветственных баллов
ОК проверка входящих запросов-сообщений
ОК если содержит код, то начислить баллы
ОК или если содержит код для знакомства, то сгенерировать несколько веб хуков
*логика и содержание ответных веб запросов управляется через менеджерский и админский кабинет
ОК Типы веб хуков
   POST и GET запросы

slag - имя мероприятия
у нас все пользователи разделены по физическим событиями - это мероприятия. у него есть название, дата, сколько баллов мы начисляем за регистрацию, знакомство и тд.
одновременно пользователь может быть только в одном мероприятии и информация об этом приходит в POST запросе. информация о том, сколько баллов начислено, проверка на промокоды в базе и тд проходит с учетом того, какое это мероприятие.
то есть если будет запрос с меткой другого мероприятия, то у того же пользователя может быть другое количество баллов


Описание логики работы:
https://miro.com/app/board/o9J_kwrNVkg=/


Описание инфраструктуры:
* выделенный windows server
* MSSQL
* IIS
* язык c#

Пошаговая логика работы:
шаг 1.
входящий веб запрос на http://88.99.60.73/api/Values/WhatsapMessage 
в нем сообщение от пользователя, которое содержит 
      а) 7 значное цифровое значение. значит это moibizId и система пытается зарегистрировать участника
      б) 3-6 знаков - это промокод, система пытается найти сколько баллов дает промокод и начислить данные
      в) иное - игнорируется
     

шаг 2 - регистрация
* проверяется в таблице есть ли этот moibizId 
* находим к какой команде относится участник и какой у него slag то есть имя мероприятия
* под этим кодом никто еще не зарегистрировался, значит регистрируем участника: 
    * записываем в таблицу и обновляем таблицу баллами, 
    * отправляем пользователю текст с значением из таблицы slag про регистрацию
* ждем любое входящее сообщение и записываем в таблицу

шаг 3 - промокоды
* получаем от пользователя цифру от 3 до 6 значений
* проверяем по таблице score_code не превышен ли счетчик, не устарел ли код
* проверяем по таблице score_journalrecord не начислялся ли этот код уже участнику
* если все ок, то начисляем {n} баллов, сумма берется из таблицы score_code
* вносим запись в журнал score_journalrecord
* проверяем на каком месте пользователь находится среди всех участников этого мероприятия, то есть у всех, у кого slag==slag_this

шаг 4 - обновляем рейтинг
* после обновления баллов обновляем рейтинг участника и его команды. присылаем ему в обратном сообщении
* текст шаблона из таблицы, пример: “спасибо, вам начислено 100 баллов, ваш текущий баланс 150 баллов, ваш рейтинг 1 из 1 участников, ваша команда на 1 месте из 1 команды”

шаг 5 - знакомство
* получили от пользователя 7 значное число
* проверили по таблице регистраций и нашли, что такой участник уже зарегистрировался
* находим имя и телефон и отправляем текст пользователю, шаблон из таблицы. Например: “смотрите с кем вы познакомились:  {name}, телефон {phone}”
* начисляем количество баллов за знакомство, которое берем из таблицы score_event
* проверяем что стоит в таблице с score_event в столбце allow_two_side_friendship
* если true то находим в таблице ID второго пользователя и начисляем ему {n} баллов за знакомство
* отправляем ему сообщение о начислении баллов
